// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: order.proto

package orderservice

import (
	"context"

	"github.com/tsfdsong/tradeengin/app/order/order"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BatchOrderRequest  = order.BatchOrderRequest
	BatchOrderResponse = order.BatchOrderResponse
	Order              = order.Order
	OrderRequest       = order.OrderRequest
	OrderResponse      = order.OrderResponse

	OrderService interface {
		CreateOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
		CreateBatchOrder(ctx context.Context, in *BatchOrderRequest, opts ...grpc.CallOption) (*BatchOrderResponse, error)
	}

	defaultOrderService struct {
		cli zrpc.Client
	}
)

func NewOrderService(cli zrpc.Client) OrderService {
	return &defaultOrderService{
		cli: cli,
	}
}

func (m *defaultOrderService) CreateOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.CreateOrder(ctx, in, opts...)
}

func (m *defaultOrderService) CreateBatchOrder(ctx context.Context, in *BatchOrderRequest, opts ...grpc.CallOption) (*BatchOrderResponse, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.CreateBatchOrder(ctx, in, opts...)
}
