// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: matching.proto

package matchservice

import (
	"context"

	"github.com/tsfdsong/tradeengin/app/matching/match"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	MatchResult       = match.MatchResult
	Order             = match.Order
	OrderBookRequest  = match.OrderBookRequest
	OrderBookSnapshot = match.OrderBookSnapshot
	PriceLevel        = match.PriceLevel
	Trade             = match.Trade

	MatchService interface {
		ProcessOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*MatchResult, error)
		GetOrderBook(ctx context.Context, in *OrderBookRequest, opts ...grpc.CallOption) (*OrderBookSnapshot, error)
	}

	defaultMatchService struct {
		cli zrpc.Client
	}
)

func NewMatchService(cli zrpc.Client) MatchService {
	return &defaultMatchService{
		cli: cli,
	}
}

func (m *defaultMatchService) ProcessOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*MatchResult, error) {
	client := match.NewMatchServiceClient(m.cli.Conn())
	return client.ProcessOrder(ctx, in, opts...)
}

func (m *defaultMatchService) GetOrderBook(ctx context.Context, in *OrderBookRequest, opts ...grpc.CallOption) (*OrderBookSnapshot, error) {
	client := match.NewMatchServiceClient(m.cli.Conn())
	return client.GetOrderBook(ctx, in, opts...)
}
